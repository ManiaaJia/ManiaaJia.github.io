[{"title":"diffuser入门","date":"2023-09-18T15:32:19.000Z","url":"/2023/09/18/diffuser-indoor/","tags":[["AI画画","/tags/AI%E7%94%BB%E7%94%BB/"],["笔记","/tags/%E7%AC%94%E8%AE%B0/"]],"categories":[["玩花活","/categories/%E7%8E%A9%E8%8A%B1%E6%B4%BB/"]],"content":"第一篇通过代码进行AI画画的笔记 1. 准备资源和简单加载入门使用到的资源都是直接从hf上获取，建议采用将资源下载到本地的方式，以便之后多次使用或者调整结果，具体代码为： 从上面的名字不难猜想，diffuser有多种Pipeline可以使用，分别可以处理不同的任务，且定义了Pipeline之后还可以进行组件替换； 查看pipeline及其组件的属性可以用print或是.config属性： 2. 初级绘画完成了资源下载和pipeline搭建后，就可以来进行绘图了，直接调用绘图方法即可： 3. 高级绘画在实际使用中，我们会对现有的pipeline进行改造、以满足我们的需求，利用替换不同的ckpt、lora、controlnet等，接下来来简单介绍一下原理和方法； 3.1 Unet生图实际画图的原理已经十分清楚，简单来说就是一个根据prompt对随机噪声逐步去噪的过程，这里我们用Unet这种常用的用来拟合不同时间步噪声的网络来做一个说明(实际中可能有gan等网络)； 直接来看代码，理解拟合噪声的过程： 这里的model有一些固定参数 • sample_size ：输入样本的高度和宽度维度。• in_channels ：输入样本的输入通道数。• down_block_types 和 up_block_types ：用于创建 UNet 架构的下采样和上采样块的类型。• block_out_channels ：下采样模块的输出通道数;也以相反的顺序用于上采样模块的输入通道数。• layers_per_block ：每个UNet区块中存在的ResNet blocks数量。 3.2 scheduler控制scheduler的作用就是控制上述Unet这一“拟合工具”，来完成我们想要的绘图，同样来看相关的定义代码： 这里的scheduler同样有一些固定参数 • num_train_timesteps ：去噪过程的长度，换句话说，将随机高斯噪声处理成数据样本所需的时间步数。• beta_schedule ：用于推理和训练的噪声调度器类型。• beta_start 和：噪声调度器的起始噪声值和结束噪声值。 3.3 组合作用最后来看一下如何综合两个关键组件，完成我们的绘画，为了简单，这里没有引入text prompt： 最后就可以来看我们生成的猫咪了： 简单看一下上面的scheduler里有什么参数 print(scheduler)DDPMScheduler { “_class_name”: “DDPMScheduler”, “_diffusers_version”: “0.13.1”, “beta_end”: 0.02, “beta_schedule”: “linear”, “beta_start”: 0.0001, “clip_sample”: true, “clip_sample_range”: 1.0, “num_train_timesteps”: 1000, “prediction_type”: “epsilon”, “trained_betas”: null, “variance_type”: “fixed_small”} "},{"title":"template","date":"2023-08-25T11:29:00.000Z","url":"/2023/08/25/template/","tags":[["废话一箩筐","/tags/%E5%BA%9F%E8%AF%9D%E4%B8%80%E7%AE%A9%E7%AD%90/"]],"categories":[["叨逼叨","/categories/%E5%8F%A8%E9%80%BC%E5%8F%A8/"]],"content":"让我们来看看怎么写笔记 上面是笔记摘要，这里是笔记内容 这是我的文章模板好的再试一下！ 终于完成啦！ 注意！ 等等！ 我们发现了一个问题！ 折叠框(CLOSED) 碎碎念 这里被折叠了捏 折叠框(OPENED) 强势点评 这里本该被折叠捏 提示板 今日感悟 这里类型可以是successdangerinfowarning 模糊字被模糊的字符 图片是这样插入的 "}]